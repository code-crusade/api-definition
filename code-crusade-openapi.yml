openapi: 3.0.1
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: 'urn:tos'
  contact: {}
paths:
  /exercises:
    get:
      summary: Gets the full list of exercises
      operationId: exercisesIndex
      security:
      - authCookie: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exercise'
  '/exercises/{exerciseId}':
    get:
      summary: Gets the specified exercise
      security:
      - authCookie: []
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: User must be logged in to see this exercise
        '403':
          description: User is not allowed to see this exercise
        '404':
          description: Exercise does not exist
  '/exercises/{exerciseId}/submissions':
    get:
      summary: Gets the list of submissions for the specified exercise
      security:
      - authCookie: []
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExerciseSubmission'
        '401':
          description: User must be logged in to see the submissions.
        '403':
          description: User is not allowed to see the submissions.
        '404':
          description: Exercise does not exist
    post:
      summary: Submits the code as the current user's solution for the exercise
      security:
      - authCookie: []
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunnerArguments'
      responses:
        '201':
          description: Submission has been created
        '400':
          description: Submitted solution does not fit the exercise parameters
        '401':
          description: User must be logged in to submit solutions to the exercise
        '403':
          description: User is not allowed to post solutions for this exercise
        '404':
          description: Exercise does not exist
  '/exercises/{exerciseId}/test':
    post:
      summary: Validate the code against the exercise's test suite
      security:
      - authCookie: []
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunnerArguments'
      responses:
        '200':
          description: The test suite has been executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeValidationReport'
        '400':
          description: Submitted solution does not fit the exercise parameters
        '401':
          description: User must be logged in to see this exercise
        '403':
          description: User is not allowed to see this exercise
        '404':
          description: Exercise does not exist
  '/exercises/{exerciseId}/submissions/{submissionId}':
    get:
      summary: Gets the list of submissions for the specified exercise
      security:
      - authCookie: []
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      - name: submissionId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSubmission'
        '401':
          description: User must be logged in to see this submission
        '403':
          description: User is not allowed to see this submission
        '404':
          description: Submission does not exist
  '/exercises/{exerciseId}/submissions/{submissionId}/results':
    get:
      summary: Gets the results of the exercise validation for this submission
      security:
      - authCookie: []
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      - name: submissionId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeValidationReport'
        '401':
          description: User must be logged in to see the results
        '403':
          description: User is not allowed to see the results
        '404':
          description: Submission does not exist
  '/runner/{exerciseId}':
    post:
      deprecated: true
      summary: Runs provided code
      operationId: runCodeForExercise
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunnerArguments'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/RFC7807Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/auth/caslogin':
    get:
      summary: Provides a session cookie given a valid CAS Service ticket
      # The service ticket can be used by the server to get user data from the SSO server
      # Should probably be provided by spring-security or java-cas-client
      externalDocs:
        description: Apereo CAS protocol documentation
        url: 'https://apereo.github.io/cas/4.2.x/protocol/CAS-Protocol.html'
      security: [] # You shouldn't have to be logged in to login
      tags: ['auth']
      parameters:
      - name: ticket
        in: query
        required: true
        schema:
          type: string
          example: 'ST-12345678'
      responses:
        '200':
          description: Successfully authenticated
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345;
        # TODO : What to do if auth fails? 302?
  '/auth/login':
    post:
      summary: Provides a session cookie given a username and password
      security: [] # You shouldn't have to be logged in to login
      tags: ['auth']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPass'
      responses:
        '200':
          description: Successfully authenticated
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345;
        '400':
          description: Authentication failed
servers:
- url: '//localhost:8080/'
components:
  schemas:
    RunnerArguments:
      type: object
      properties:
        code:
          description: code
          type: string
        language:
          description: language
          type: string
      example:
        language: js
        code: 'function main() { console.log(''Hello World''); }'
    CodeValidationReport:
      type: object
      properties:
        exerciseId:
          type: integer
        results:
          type: array
          items:
            type: object
            properties:
              testName:
                type: string
              passed:
                type: boolean
              inputParameters:
                type: array
                items: {}
              expectedOutput: {}
              actualOutput: {}

    RFC7807Body:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
        status:
          type: integer
          format: int64
        instance:
          type: string
          format: uri
      xml:
        name: problem
    Exercise:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: object
          additionalProperties:
            type: string
            example: "Titre de l'exercice"
          required: ['fr']
        description:
          type: object
          additionalProperties:
            type: string
            example: "Description de l'exercice"
          required: ['fr']
        difficulty:
          $ref: '#/components/schemas/Difficulties'
        entryPoint:
          $ref: '#/components/schemas/Template'
        supportedLanguages:
          type: array
          items:
            type: string
        unitTests:
          type: array
          items:
            $ref: '#/components/schemas/UnitTest'
        template:
          $ref: '#/components/schemas/Template'
    ExerciseSubmission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        exerciseId:
          type: integer
        userId:
          type: integer
        code:
          type: string
        language:
          $ref: '#/components/schemas/'
        #validationReport:
        #  $ref: '#/components/schemas/CodeValidationReport'
        createdAt:
          type: string
          format: date-time
    Template:
      type: object
      properties:
        className:
          type: string
        functionName:
          type: string
        args:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                $ref: '#/components/schemas/SupportedType'
        functionReturnValue:
          $ref: '#/components/schemas/AnyValue'
        functionReturnType:
          $ref: '#/components/schemas/SupportedType'
        prependedCode:
          type: object
          additionalProperties:
            type: string
        appendedCode:
          type: object
          additionalProperties:
            type: string
    SupportedType:
      type: string
      enum:
      - BOOLEAN
      - INT
      - FLOAT
      - STRING
      - BOOLEAN_ARR
      - INT_ARR
      - FLOAT_ARR
      - STRING_ARR
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
    UserPass:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    SupportedLanguages:
      description: Languages supported by the api
      type: string
      enum:
      - Cpp
      - Java
      - Javascript
      - Python
    Difficulties:
      description: Exercise difficulty range
      type: string
      enum:
      - EASY
      - MEDIUM
      - HARD
    Semesters:
      description: Semester values.
      type: string
      enum:
      - FALL
      - WINTER
      - SUMMER
    AnyValue:
      description: Type encompassing any value type
      nullable: true
    UnitTest:
      description: A simple input-ouput unit test
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        input:
          type: array
          items:
            $ref: '#/components/schemas/TestInput'
        outputValue:
          $ref: '#/components/schemas/AnyValue'
    TestInput:
      description: A test input and its type
      type: object
      properties:
        inputType:
          $ref: '#/components/schemas/SupportedType'
        inputValue:
          $ref: '#/components/schemas/AnyValue'
    Group:
      description: Group of students
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        groupNumber:
          type: integer
        class:
          type: string
        semester:
          $ref: '#/components/schemas/Semesters'
        year:
          type: number
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
    Student:
      description: A student user
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            accessCode:
              type: string
  securitySchemes:
    authCookie:
      type: apiKey
      in: cookie
      name: JSESSIONID
  responses:
    RFC7807Error:
      description: Api problem response
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/RFC7807Body'
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/RFC7807Body'